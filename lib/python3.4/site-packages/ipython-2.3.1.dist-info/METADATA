Metadata-Version: 2.0
Name: ipython
Version: 2.3.1
Summary: IPython: Productive Interactive Computing
Home-page: http://ipython.org
Author: The IPython Development Team
Author-email: ipython-dev@scipy.org
License: BSD
Download-URL: https://github.com/ipython/ipython/downloads
Keywords: Interactive,Interpreter,Shell,Parallel,Distributed,Web-based computing,Qt console,Embedding
Platform: Linux
Platform: Mac OSX
Platform: Windows XP/Vista/7/8
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: System :: Distributed Computing
Classifier: Topic :: System :: Shells
Provides-Extra: all
Provides-Extra: doc
Provides-Extra: nbconvert
Provides-Extra: notebook
Provides-Extra: parallel
Provides-Extra: qtconsole
Provides-Extra: test
Provides-Extra: zmq
Requires-Dist: jinja2; extra == 'all'
Requires-Dist: Sphinx (>=0.3); extra == 'all'
Requires-Dist: pygments; extra == 'all'
Requires-Dist: pyzmq (>=2.1.11); extra == 'all'
Requires-Dist: numpydoc; extra == 'all'
Requires-Dist: tornado (>=3.1); extra == 'all'
Requires-Dist: nose (>=0.10.1); extra == 'all'
Requires-Dist: Sphinx (>=1.1); extra == 'all'
Requires-Dist: Sphinx (>=1.1); extra == 'doc'
Requires-Dist: numpydoc; extra == 'doc'
Requires-Dist: pygments; extra == 'nbconvert'
Requires-Dist: jinja2; extra == 'nbconvert'
Requires-Dist: Sphinx (>=0.3); extra == 'nbconvert'
Requires-Dist: tornado (>=3.1); extra == 'notebook'
Requires-Dist: pyzmq (>=2.1.11); extra == 'notebook'
Requires-Dist: jinja2; extra == 'notebook'
Requires-Dist: pyzmq (>=2.1.11); extra == 'parallel'
Requires-Dist: pyzmq (>=2.1.11); extra == 'qtconsole'
Requires-Dist: pygments; extra == 'qtconsole'
Requires-Dist: nose (>=0.10.1); extra == 'test'
Requires-Dist: pyzmq (>=2.1.11); extra == 'zmq'
Requires-Dist: gnureadline; sys.platform == 'darwin' and platform.python_implementation == 'CPython'
Requires-Dist: pyreadline (>=2.0); sys.platform == 'win32' and platform.python_implementation == 'CPython'
Requires-Dist: mock; extra == 'test' and python_version < '3.3'


IPython provides a rich toolkit to help you make the most out of using Python
interactively.  Its main components are:

* Powerful interactive Python shells (terminal- and Qt-based).
* A web-based interactive notebook environment with all shell features plus
  support for embedded figures, animations and rich media.
* Support for interactive data visualization and use of GUI toolkits.
* Flexible, embeddable interpreters to load into your own projects.
* A high-performance library for high level and interactive parallel computing
  that works in multicore systems, clusters, supercomputing and cloud scenarios.

The enhanced interactive Python shells have the following main features:

* Comprehensive object introspection.

* Input history, persistent across sessions.

* Caching of output results during a session with automatically generated
  references.

* Extensible tab completion, with support by default for completion of python
  variables and keywords, filenames and function keywords.

* Extensible system of 'magic' commands for controlling the environment and
  performing many tasks related either to IPython or the operating system.

* A rich configuration system with easy switching between different setups
  (simpler than changing $PYTHONSTARTUP environment variables every time).

* Session logging and reloading.

* Extensible syntax processing for special purpose situations.

* Access to the system shell with user-extensible alias system.

* Easily embeddable in other Python programs and GUIs.

* Integrated access to the pdb debugger and the Python profiler.

The parallel computing architecture has the following main features:

* Quickly parallelize Python code from an interactive Python/IPython session.

* A flexible and dynamic process model that be deployed on anything from
  multicore workstations to supercomputers.

* An architecture that supports many different styles of parallelism, from
  message passing to task farming.

* Both blocking and fully asynchronous interfaces.

* High level APIs that enable many things to be parallelized in a few lines
  of code.

* Share live parallel jobs with other users securely.

* Dynamically load balanced task farming system.

* Robust error handling in parallel code.

The latest development version is always available from IPython's `GitHub
site <http://github.com/ipython>`_.


